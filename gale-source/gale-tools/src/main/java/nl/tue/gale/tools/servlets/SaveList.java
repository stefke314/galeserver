/*

	This file is part of GALE (Generic Adaptation Language and Engine).

    GALE is free software: you can redistribute it and/or modify it under the 
    terms of the GNU Lesser General Public License as published by the Free 
    Software Foundation, either version 3 of the License, or (at your option) 
    any later version.

    GALE is distributed in the hope that it will be useful, but WITHOUT ANY 
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
    FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for 
    more details.

    You should have received a copy of the GNU Lesser General Public License
    along with GALE. If not, see <http://www.gnu.org/licenses/>.
    
 */
/**
 * SaveList.java
 * Last modified: $Date$
 * In revision:   $Revision$
 * Modified by:   $Author$
 *
 * Copyright (c) 2008-2011 Eindhoven University of Technology.
 * All Rights Reserved.
 *
 * This software is proprietary information of the Eindhoven University
 * of Technology. It may be used according to the GNU LGPL license.
 */
package nl.tue.gale.tools.servlets;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.util.Vector;

import javax.servlet.ServletConfig;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import nl.tue.gale.tools.AHAStatic;
import nl.tue.gale.tools.config.AhaAuthor;
import nl.tue.gale.tools.config.AuthorsConfig;

public class SaveList extends HttpServlet {

	private String filename;
	private String authorname;
	private String created;

	/**
	 * Initializes the servlet
	 * 
	 * @param config
	 *            the <code>ServletConfig</code>
	 * @throws ServletException
	 */
	public void init(ServletConfig config) throws ServletException {
		super.init(config);
	}

	/**
	 * Overrides the <code>service</code> from <code>HttpServlet</code>
	 * 
	 * @param request
	 *            the <code>HttpServletRequest</code>
	 * @param response
	 *            the <code>HttpServletResponse</code>
	 * @throws IOException
	 *             generated by <code>doPost</code>
	 * @throws ServletException
	 *             when something goes wrong with servlet
	 */
	public void service(HttpServletRequest request, HttpServletResponse response)
			throws IOException, ServletException {
		HttpSession session = request.getSession(true);
		if (session != null)
			synchronized (session.getId()) {
				filename = request.getHeader("Filename");
				authorname = request.getHeader("Author");
				created = request.getHeader("Created");
				try {
					doPost(request, response);
				} catch (ServletException se) {
					System.out.println(se);
				} catch (IOException ie) {
					System.out.println(ie);
				}
			}
	}

	/**
	 * Overrides the <code>doPost</code> from <code>HttpServlet</code>
	 * 
	 * @param request
	 *            the <code>HttpServletRequest</code>
	 * @param response
	 *            the <code>HttpServletResponse</code>
	 * @throws IOException
	 *             when something goes wrong with writing to file
	 * @throws ServletException
	 *             when something goes wrong with servlet
	 */
	public void doPost(HttpServletRequest request, HttpServletResponse response)
			throws java.io.IOException, ServletException {

		ObjectInputStream inputFromApplet = null;
		try {
			String authorfiles = AHAStatic.config(getServletContext()).Get(
					"AHAROOT")
					+ AHAStatic.AUTHORFILESPATH.substring(1);
			InputStream is = request.getInputStream();
			OutputStream us = new FileOutputStream(new File(authorfiles
					+ authorname + "/" + filename));
			byte[] buffer = new byte[8192];
			int nr = 8192;
			while (nr != -1) {
				nr = is.read(buffer, 0, 8192);
				if (nr != -1)
					us.write(buffer, 0, nr);
			}
			us.close();
			response.getOutputStream().close();
			AuthorsConfig aconf = new AuthorsConfig(getServletContext());
			AhaAuthor ahaAuthor = aconf.GetAuthor(authorname);
			Vector v = ahaAuthor.getCourseList();
			String coursename = filename.replaceAll(".aha", "").replaceAll(
					".gaf", "");
			if (!v.contains(coursename)) {
				v.add(coursename);
				aconf.StoreConfig();
			}
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}