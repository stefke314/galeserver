/*

	This file is part of GALE (Generic Adaptation Language and Engine).

    GALE is free software: you can redistribute it and/or modify it under the 
    terms of the GNU Lesser General Public License as published by the Free 
    Software Foundation, either version 3 of the License, or (at your option) 
    any later version.

    GALE is distributed in the hope that it will be useful, but WITHOUT ANY 
    WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS 
    FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for 
    more details.

    You should have received a copy of the GNU Lesser General Public License
    along with GALE. If not, see <http://www.gnu.org/licenses/>.
    
 */
/**
 * CCCPopup.java
 * Last modified: $Date$
 * In revision:   $Revision$
 * Modified by:   $Author$
 *
 * Copyright (c) 2008-2011 Eindhoven University of Technology.
 * All Rights Reserved.
 *
 * This software is proprietary information of the Eindhoven University
 * of Technology. It may be used according to the GNU LGPL license.
 */
package nl.tue.gale.tools.amt;

import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/**
 * Concept Consistency Check GUI popup frame containing a CCC for an AHA!
 * application.
 * 
 * @author T.J. Dekker
 * @version 1.0.0
 */
public class CCCPopup extends javax.swing.JFrame {

	/**
	 * Creates new form CCCPopup
	 * 
	 * @param plistener
	 *            the interfacelistener
	 * @param authorname
	 *            name of an author
	 * @param appname
	 *            the name of the application of the CCC
	 */
	public CCCPopup(TCCCPopupInterface plistener, String authorname,
			String appname) {
		listener = plistener;
		FAuthorName = authorname;
		FAppName = appname;
		initComponents();
		postInitComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {// GEN-BEGIN:initComponents
		java.awt.GridBagConstraints gridBagConstraints;

		pnlContents = new javax.swing.JPanel();
		pnlTitle = new javax.swing.JPanel();
		lblTitle = new javax.swing.JLabel();
		lblAppName = new javax.swing.JLabel();
		pnlStatus = new javax.swing.JPanel();
		lblIcon = new javax.swing.JLabel();
		lblIconText = new javax.swing.JLabel();
		btnGaf = new javax.swing.JButton();
		btnAha = new javax.swing.JButton();
		btnRefresh = new javax.swing.JButton();
		pnlReport = new javax.swing.JPanel();
		spnReport = new javax.swing.JScrollPane();
		pnlClose = new javax.swing.JPanel();
		btnClose = new javax.swing.JButton();

		getContentPane().setLayout(new java.awt.CardLayout());

		setBackground(new java.awt.Color(255, 255, 255));
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				exitForm(evt);
			}
		});

		pnlContents.setLayout(new java.awt.GridBagLayout());

		pnlContents.setBackground(new java.awt.Color(255, 255, 255));
		pnlTitle.setLayout(new java.awt.GridBagLayout());

		pnlTitle.setBackground(new java.awt.Color(255, 255, 255));
		pnlTitle.setMaximumSize(new java.awt.Dimension(2147483647, 30));
		pnlTitle.setMinimumSize(new java.awt.Dimension(386, 30));
		pnlTitle.setPreferredSize(new java.awt.Dimension(386, 30));
		lblTitle.setBackground(new java.awt.Color(255, 255, 255));
		lblTitle.setFont(new java.awt.Font("Dialog", 1, 14));
		lblTitle.setText("Concept Consistency Check Report for Application:");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weighty = 1.0;
		pnlTitle.add(lblTitle, gridBagConstraints);

		lblAppName.setBackground(new java.awt.Color(255, 255, 255));
		lblAppName.setFont(new java.awt.Font("Dialog", 1, 14));
		lblAppName.setText("App");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
		pnlTitle.add(lblAppName, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
		pnlContents.add(pnlTitle, gridBagConstraints);

		pnlStatus.setLayout(new java.awt.GridBagLayout());

		pnlStatus.setBackground(new java.awt.Color(255, 255, 255));
		lblIcon.setMaximumSize(new java.awt.Dimension(50, 50));
		lblIcon.setMinimumSize(new java.awt.Dimension(50, 50));
		lblIcon.setPreferredSize(new java.awt.Dimension(50, 50));
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		pnlStatus.add(lblIcon, gridBagConstraints);

		lblIconText.setText("All resource links are valid.");
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 1;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
		pnlStatus.add(lblIconText, gridBagConstraints);

		btnGaf.setFont(new java.awt.Font("Dialog", 0, 12));
		btnGaf.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/nl/tue/gale/tools/amt/pics/gaffile.png")));
		btnGaf.setToolTipText("Open with Graph Authoring Tool");
		btnGaf.setMaximumSize(new java.awt.Dimension(30, 30));
		btnGaf.setMinimumSize(new java.awt.Dimension(30, 30));
		btnGaf.setPreferredSize(new java.awt.Dimension(30, 30));
		btnGaf.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnGafActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 2;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 3);
		pnlStatus.add(btnGaf, gridBagConstraints);

		btnAha.setFont(new java.awt.Font("Dialog", 0, 12));
		btnAha.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/nl/tue/gale/tools/amt/pics/ahafile.png")));
		btnAha.setToolTipText("Open with Concept Editor");
		btnAha.setMaximumSize(new java.awt.Dimension(30, 30));
		btnAha.setMinimumSize(new java.awt.Dimension(30, 30));
		btnAha.setPreferredSize(new java.awt.Dimension(30, 30));
		btnAha.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnAhaActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 3;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 3, 0, 10);
		pnlStatus.add(btnAha, gridBagConstraints);

		btnRefresh.setFont(new java.awt.Font("Dialog", 0, 12));
		btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource(
				"/nl/tue/gale/tools/amt/pics/refresh.png")));
		btnRefresh.setToolTipText("Refresh");
		btnRefresh.setMaximumSize(new java.awt.Dimension(30, 30));
		btnRefresh.setMinimumSize(new java.awt.Dimension(30, 30));
		btnRefresh.setPreferredSize(new java.awt.Dimension(30, 30));
		btnRefresh.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnRefreshActionPerformed(evt);
			}
		});

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
		pnlStatus.add(btnRefresh, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(5, 10, 5, 10);
		pnlContents.add(pnlStatus, gridBagConstraints);

		pnlReport.setLayout(new java.awt.GridBagLayout());

		pnlReport.setBackground(new java.awt.Color(255, 255, 255));
		spnReport.setBackground(new java.awt.Color(255, 255, 255));
		spnReport.setBorder(new javax.swing.border.EtchedBorder());
		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weightx = 1.0;
		gridBagConstraints.weighty = 1.0;
		pnlReport.add(spnReport, gridBagConstraints);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 2;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.weighty = 1.0;
		gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
		pnlContents.add(pnlReport, gridBagConstraints);

		pnlClose.setLayout(new java.awt.BorderLayout());

		pnlClose.setBackground(new java.awt.Color(255, 255, 255));
		pnlClose.setMaximumSize(new java.awt.Dimension(40, 40));
		pnlClose.setMinimumSize(new java.awt.Dimension(40, 40));
		pnlClose.setPreferredSize(new java.awt.Dimension(40, 40));
		btnClose.setText("Close");
		btnClose.setMaximumSize(new java.awt.Dimension(80, 30));
		btnClose.setMinimumSize(new java.awt.Dimension(80, 30));
		btnClose.setPreferredSize(new java.awt.Dimension(80, 30));
		btnClose.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnCloseActionPerformed(evt);
			}
		});

		pnlClose.add(btnClose, java.awt.BorderLayout.EAST);

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 3;
		gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
		gridBagConstraints.insets = new java.awt.Insets(7, 0, 7, 10);
		pnlContents.add(pnlClose, gridBagConstraints);

		getContentPane().add(pnlContents, "card2");

		pack();
	}// GEN-END:initComponents

	/**
	 * Refreshes the current view (performs the check again)
	 * 
	 * @param evt
	 *            the event that triggered this action
	 */
	private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnRefreshActionPerformed
		setBusy();
		// show report in table
		tm.setRowCount(0);

		Thread t = new Thread() {
			public void run() {
				TCCCReport rep = listener.getReport(FAuthorName, FAppName);
				showReport(rep);
				setDefaultCursor();
			}
		};

		t.start();
	}// GEN-LAST:event_btnRefreshActionPerformed

	/**
	 * Opens the <Code>.aha</Code> file for this application
	 * 
	 * @evt the event that triggered this action
	 */
	private void btnAhaActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnAhaActionPerformed
		setWaitCursor();

		Thread t = new Thread() {
			public void run() {
				listener.openAhaFile(FAuthorName, FAppName);
				setDefaultCursor();
			}
		};

		t.start();
	}// GEN-LAST:event_btnAhaActionPerformed

	/**
	 * Opens the <Code>.gaf</Code> file for this application
	 * 
	 * @evt the event that triggered this action
	 */
	private void btnGafActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnGafActionPerformed
		setWaitCursor();

		Thread t = new Thread() {
			public void run() {
				listener.openGafFile(FAuthorName, FAppName);
				setDefaultCursor();
			}
		};

		t.start();
	}// GEN-LAST:event_btnGafActionPerformed

	/**
	 * Closes the frame Essentially a call to exitForm(evt)
	 * 
	 * @param evt
	 *            the event that triggered this action
	 */
	private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnCloseActionPerformed
		exitForm(null);
	}// GEN-LAST:event_btnCloseActionPerformed

	/**
	 * Closes the frame (dispose)
	 * 
	 * @param evt
	 *            the event that triggered this action
	 */
	private void exitForm(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_exitForm
		dispose();
	}// GEN-LAST:event_exitForm

	/**
	 * Initializes components, which are not inited by the Sun One generated
	 * method "initcomponents".
	 */
	private void postInitComponents() {
		// set icons
		icnCorrect = new ImageIcon(getClass().getResource(
				AMtc.PICPATH + "correct.png"));
		icnIncorrect = new ImageIcon(getClass().getResource(
				AMtc.PICPATH + "incorrect.png"));

		// create report table
		Object[] columnnames = { "Concept", "Resource", "Status" };
		Object[][] rowdata = {};
		tm = new DefaultTableModel(columnnames, 0) {
			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return false;
			}
		};
		tblReport = new JTable(tm);

		spnReport.setViewportView(tblReport);

		tblReport.setIntercellSpacing(new java.awt.Dimension(0, 0));
		tblReport.setRowSelectionAllowed(true);
		tblReport.setShowGrid(false);
		tblReport.getTableHeader().setReorderingAllowed(false);

		int w = 570;
		int h = 600;
		Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
		setLocation(screenSize.width / 2 - w / 2, screenSize.height / 2 - h / 2);
		setSize(w, h);

		setTitle("CCCReport");
		lblAppName.setText(FAppName);
	}

	/**
	 * Sets the statuslabel and cursor as busy
	 */
	public void setBusy() {
		lblIcon.setIcon(null);
		lblIconText.setText("Checking resource existence...");
		setWaitCursor();
	}

	/**
	 * Shows the specified CCCReport in tblReport
	 * 
	 * @param c
	 *            the report to display
	 */
	public void showReport(TCCCReport c) {
		rep = c;

		// show report in table
		tm.setRowCount(0);

		Vector v = c.getRepList();

		boolean allgood = true;

		for (int i = 0; i < v.size(); i++) {
			TCCCReportPart part = (TCCCReportPart) v.get(i);

			Vector row = new Vector();

			row.add(part.getConceptName());
			row.add(part.getResourceName());
			row.add(part.isPassed() ? "Success" : "Failed");

			tm.addRow(row);

			allgood &= part.isPassed();
		}

		if (allgood) {
			lblIcon.setIcon(icnCorrect);
			lblIconText.setText("All resources are valid");
		} else {
			lblIcon.setIcon(icnIncorrect);
			lblIconText.setText("Some resources are missing");
		}
	}

	/**
	 * Sets the cursor of this panel to the default wait cursor.
	 */
	private void setWaitCursor() {
		setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
	}

	/**
	 * Sets the cursor of this panel to the default cursor.
	 */
	private void setDefaultCursor() {
		setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
	}

	private ImageIcon icnCorrect; // icon representing a valid report
	private ImageIcon icnIncorrect; // icon representing an invalid report
	private JTable tblReport; // table containing the report
	private DefaultTableModel tm; // tablemodel for tblReport
	private String FAuthorName; // name of the author that owns the app
	private String FAppName; // application name for the report
	private TCCCReport rep; // the report that is currently displayed
	private TCCCPopupInterface listener; // TCCCPopup interface listener
	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton btnAha;
	private javax.swing.JButton btnClose;
	private javax.swing.JButton btnGaf;
	private javax.swing.JButton btnRefresh;
	private javax.swing.JLabel lblAppName;
	private javax.swing.JLabel lblIcon;
	private javax.swing.JLabel lblIconText;
	private javax.swing.JLabel lblTitle;
	private javax.swing.JPanel pnlClose;
	private javax.swing.JPanel pnlContents;
	private javax.swing.JPanel pnlReport;
	private javax.swing.JPanel pnlStatus;
	private javax.swing.JPanel pnlTitle;
	private javax.swing.JScrollPane spnReport;
	// End of variables declaration//GEN-END:variables

}